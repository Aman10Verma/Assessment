const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const User = require("../model/user.model");  // Adjust path to your model
const bcrypt = require("bcrypt");  // For password hashing in tests

// In-memory MongoDB server instance for testing
let mongoServer;

// MongoDB URI for MongoDB Atlas
const uri = "mongodb+srv://aman2ka19:Verma.2002@cluster0.84t39hi.mongodb.net/Assessment";

// Before all tests, establish a connection to the database (use in-memory DB or Atlas)
beforeAll(async () => {
  // You can switch this to MongoMemoryServer if you want to use an in-memory DB for testing
  await mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });
});

// After all tests, disconnect from the database
afterAll(async () => {
  await mongoose.disconnect();
});

// Before each test, clean up the database to avoid duplicate data issues
beforeEach(async () => {
  await User.deleteMany({}); // Clears the users collection before each test
});

// Helper function to simulate user login (using email and password)
const loginUser = async (user) => {
  const foundUser = await User.findOne({ email: user.email });
  if (!foundUser) {
    throw new Error("User not found");
  }

  // Compare password with hashed password in database
  const isMatch = await bcrypt.compare(user.password, foundUser.password);
  if (!isMatch) {
    throw new Error("Invalid credentials");
  }

  return { user: foundUser };
};

// User API Integration Tests
describe("User API Integration Tests", () => {

  it("should create a new user", async () => {
    const user = { name: "John", email: `john-${Date.now()}@example.com`, password: "password123" };

    // Create a new user
    const newUser = await User.create(user);

    // Check if the user object contains the _id field (which is auto-generated by MongoDB)
    expect(newUser).toHaveProperty("_id");
    expect(newUser.name).toBe(user.name);
    expect(newUser.email).toBe(user.email);
  });

  it("should not create a user with an existing email", async () => {
    const user = { name: "John", email: `john-${Date.now()}@example.com`, password: "password123" };

    // Create the first user with the same email
    await User.create(user);

    try {
      // Try creating another user with the same email (this should fail)
      await User.create(user);
    } catch (error) {
      // Expect an error to be thrown due to the unique email constraint
      expect(error).toBeDefined();
      expect(error.code).toBe(11000); // MongoDB duplicate key error code
    }
  });

  it("should retrieve all users", async () => {
    // Create a couple of users
    const user1 = { name: "Jane", email: `jane-${Date.now()}@example.com`, password: "password123" };
    const user2 = { name: "Doe", email: `doe-${Date.now()}@example.com`, password: "password123" };
    await User.create(user1);
    await User.create(user2);

    // Retrieve all users
    const users = await User.find();

    // Ensure that there are more than 0 users
    expect(users.length).toBeGreaterThan(0);
    expect(users[0]).toHaveProperty("_id");
  });

  it("should login a user with valid credentials", async () => {
    // Create a test user
    const user = { name: "Jane", email: `jane-${Date.now()}@example.com`, password: bcrypt.hashSync("password123", 10) }; // Hash the password
    const createdUser = await User.create(user);

    // Try to login with the correct credentials
    const loginResponse = await loginUser({ email: createdUser.email, password: "password123" });

    // Check if the login was successful
    expect(loginResponse.user.email).toBe(createdUser.email);
  });

  it("should not login with invalid credentials", async () => {
    // Create a test user
    const user = { name: "Jane", email: `jane-${Date.now()}@example.com`, password: "password123" };
    await User.create(user);

    try {
      // Attempt login with incorrect password
      await loginUser({ email: user.email, password: "wrongpassword" });
    } catch (error) {
      // Expect an error to be thrown due to invalid credentials
      expect(error).toBeDefined();
      expect(error.message).toBe("Invalid credentials");
    }
  });

  it("should get a user by ID", async () => {
    const user = { name: "Alice", email: `alice-${Date.now()}@example.com`, password: "password123" };
    const createdUser = await User.create(user);

    // Retrieve the user by ID
    const foundUser = await User.findById(createdUser._id);

    // Check if the retrieved user has the same _id as the created user
    expect(foundUser).toBeDefined();
    expect(foundUser._id.toString()).toBe(createdUser._id.toString());
  });

  it("should update a user by ID", async () => {
    const user = { name: "Bob", email: `bob-${Date.now()}@example.com`, password: "password123" };
    const createdUser = await User.create(user);

    // Update the user's name
    createdUser.name = "Robert";
    const updatedUser = await createdUser.save();

    // Check if the name was updated correctly
    expect(updatedUser.name).toBe("Robert");
  });

  it("should delete a user by ID", async () => {
    const user = { name: "Charlie", email: `charlie-${Date.now()}@example.com`, password: "password123" };
    const createdUser = await User.create(user);

    // Delete the user by ID
    await User.findByIdAndDelete(createdUser._id);

    // Try to find the deleted user (should return null)
    const deletedUser = await User.findById(createdUser._id);
    expect(deletedUser).toBeNull();
  });
});
